// Code generated by go-bindata.
// sources:
// data/bot.jade
// data/icon.png
// data/main.js
// data/main.ts
// data/package.json
// data/tsconfig.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataBotJade = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\xca\xbd\x0d\xc4\x20\x0c\x05\xe0\xde\x53\xbc\x05\x4e\x2c\x71\x55\xb6\x70\xf0\x93\x40\x32\x3f\x0a\x6e\xbc\x7d\x9a\xf4\x9f\xad\x1a\xb9\x89\x16\xc3\x45\x1a\xd5\x04\x28\xe5\x87\x3f\xab\xeb\x43\xf4\xe9\x7d\x12\x27\xd2\x79\x20\x72\x2f\xcb\x8f\x5c\x6a\x44\x70\x6c\xd7\xa0\xbc\x01\x00\x00\xff\xff\x67\x2a\x5b\x14\x4a\x00\x00\x00")

func dataBotJadeBytes() ([]byte, error) {
	return bindataRead(
		_dataBotJade,
		"data/bot.jade",
	)
}

func dataBotJade() (*asset, error) {
	bytes, err := dataBotJadeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/bot.jade", size: 74, mode: os.FileMode(420), modTime: time.Unix(1473536508, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataIconPng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x64\x00\x61\x0e\x26\x20\x75\x59\xc0\xde\x10\x48\xb1\xa4\x3b\xfa\x3a\x32\x30\x6c\xec\xe7\xfe\x93\xc8\x0a\xe4\x2b\x24\x7b\x04\xf9\x32\x30\x54\xa9\x31\x30\x34\xb4\x30\x30\xfc\x02\x0a\x35\xbc\x60\x60\x28\x35\x60\x60\x78\x95\xc0\xc0\x60\x35\x83\x81\x41\xbc\x60\xce\xae\x40\x1b\xa0\x04\x5b\x92\xb7\xbb\x0b\xc3\x7f\x10\x5c\xb0\x77\xf9\x64\xa0\x08\x67\x81\x47\x64\x31\x03\x03\xb7\x10\x08\x33\x5e\xba\x5b\xf7\x07\x68\x03\xaf\xa7\x8b\x63\x48\xc5\xad\xb7\x77\x4e\xe7\x8a\x38\x8a\x38\x04\xf6\x74\xb4\xb6\x2e\x2e\x94\x88\x13\xee\x50\x35\x2a\x34\xe9\x6b\x97\x75\x62\x3a\xf6\xf9\xe5\xbb\x55\xeb\xaa\xfd\x98\xe4\x16\x96\xff\x0e\x7d\x98\x69\x5f\x5b\xff\xf7\x27\xeb\xaa\x7d\x7d\xff\x18\x0c\x26\x31\x78\x08\x33\x64\x32\x29\xf8\x32\x2c\xe1\x6c\x30\x61\x9c\xa0\xc6\x70\x89\xc5\x61\xd6\x20\x17\xdc\x92\xbf\xd8\xfe\x40\x8c\x5d\xdc\x3d\xb6\x7f\x5f\x9e\x7f\x97\x5f\xfc\x9f\xb1\x88\xc5\x60\x62\xfd\xb3\xe5\x5d\xb1\x9c\x09\x65\xfb\x57\x07\x1c\x92\x63\x29\x90\xf2\xba\xd1\xec\xfd\xe1\x67\xcd\x9e\x3d\xbd\x7b\x57\xaf\x71\x61\x48\x57\x6d\xf6\xe5\x78\x70\xc7\xe4\x83\x02\xe3\x9c\x79\xa1\x1f\x38\x18\x75\x9c\x98\xbf\x0b\x1e\xb0\x32\x29\x60\x67\xd4\x71\x65\xde\x2e\x74\x20\xcb\xa4\x40\x98\x51\xc7\x83\xf9\x3a\xc8\xa6\x88\xc9\xaa\x05\xaa\x40\xcb\x1b\x52\x23\x99\xae\x0b\x1c\x38\x65\xf2\x41\x93\x71\xc2\xb3\xda\x86\xb7\x77\x7f\xd5\xd6\x9e\x7f\xd9\xc8\x62\x70\x6f\xfe\xc1\x1c\xb9\xc3\xc7\x4f\xcf\x16\xcf\xd0\x2b\x60\x99\xd5\x9d\x68\x3b\x83\x61\xd9\xe7\x3f\xff\x9c\xd9\xda\x05\x0f\xfc\xba\x63\xa8\x27\x70\x60\x89\x4e\x63\x32\x47\x42\x9c\x94\x45\x03\xd0\xf9\x07\xae\xe8\x34\xee\xe5\x54\x38\x68\xfb\xa3\x1e\xe2\x9f\x03\x6f\x62\x98\xcb\x54\xf1\x78\x39\x6d\xfb\x49\x71\xcb\xda\xf9\x8f\x60\xea\xaf\xec\x39\xb1\xc9\x1c\xe4\xa6\xca\xdc\xaf\x3f\xca\x99\xf7\x39\x00\x95\x27\x04\xf9\xfd\x3f\x2e\x70\xa0\xc7\x6c\x4e\xdd\xf3\xf9\xa7\xff\x54\x7e\xd9\x59\xf1\x41\xde\x87\x61\xb3\xc1\x2f\x67\x8e\x84\xea\xcf\x3d\x9b\x3e\x9f\x5f\x7e\x87\x11\xa8\x79\x93\xcd\xbf\xf5\x8a\x0d\xa6\x33\xff\x69\x83\xac\xd0\x39\xf1\xf8\x7f\x15\x53\x44\xef\xcb\xfd\x9d\x0c\xd3\x92\x7e\xe5\xab\x36\x94\xce\xf8\x67\xcd\x91\x20\xb8\xec\xbf\x1d\x53\x44\xe3\xcb\xfd\xb3\xd7\x3b\xcd\x99\x7d\xb1\x7e\x02\x6f\x41\xd2\xb2\xff\x85\x4c\x16\xda\x97\xf7\x73\x42\x1c\x56\x10\xf6\x79\x4f\x69\x41\x16\xc8\xb5\xea\x69\x9c\x36\xe7\xde\x33\x6e\x2b\x3f\xfb\xff\xfc\x8c\xbb\x9e\x37\x18\x9e\xab\x2d\x61\x07\x19\xdf\xf3\xf0\x7a\xc4\x64\x81\x03\x2f\x2d\x59\x6d\x9d\x18\x0e\x47\x30\x19\x0b\x1c\xe0\xd2\x69\xdc\xcd\x99\xa0\xe2\x9d\x60\xc1\xa8\x73\x48\x68\x47\x3f\xc8\x43\x09\x7e\x8e\xc9\x9c\x09\xb2\x7e\x8e\xe5\x02\x07\x2a\xa6\x1d\x70\x60\x8a\xe8\x52\x2d\xd0\x06\xf9\x50\x33\xa7\x82\x6b\x13\x4b\x9e\x12\xd0\x3e\x03\xee\xf0\x87\x8a\x2c\x1b\x14\x96\x2f\x78\x0d\x32\xda\xe7\x48\xe8\x8f\x0a\x90\xe5\xc5\x1b\x59\xf8\xa0\x01\xb5\xec\xb1\x48\x89\x0a\x48\x9b\x64\x24\x53\xbb\x20\x30\x24\x67\x4c\x51\x2d\xe0\x81\x38\xd7\x40\x7f\xf9\x02\x66\x0e\x90\xc6\xb3\x42\x37\x66\x03\x6d\x75\xe8\x50\xfd\x60\xce\x78\xe6\xdc\xee\x43\xbb\x85\x80\x4a\x2d\x18\xc3\x1f\xfe\x05\xc9\x4f\xf8\xf6\xe5\xef\xd7\xe7\x2f\xce\x33\x1c\xbe\x31\xf0\x49\x9c\x2c\xc1\xdf\xac\xa7\x84\x66\x74\xf7\xdc\x3e\xeb\x01\x2c\x2d\x18\x3c\x5d\xfd\x5c\xd6\x39\x25\x34\x01\x02\x00\x00\xff\xff\xb6\xf1\x6d\x4f\xa9\x04\x00\x00")

func dataIconPngBytes() ([]byte, error) {
	return bindataRead(
		_dataIconPng,
		"data/icon.png",
	)
}

func dataIconPng() (*asset, error) {
	bytes, err := dataIconPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/icon.png", size: 1193, mode: os.FileMode(420), modTime: time.Unix(1473536508, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataMainJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x54\x8f\x3d\x0e\xc2\x30\x0c\x85\xf7\x9e\xc2\xca\x94\x2e\xb9\x40\xc5\x82\xc4\xc0\xc2\xc4\x05\x4a\x30\xa5\x12\x8d\x23\xc7\xa1\x45\xa8\x77\xc7\x4d\xf9\x11\x1e\x62\xe9\x7d\xef\xe5\x25\x26\x27\x84\x24\xdc\x7b\x31\x4d\x75\x6f\x19\xb6\x24\xb0\x01\x7b\xc9\xc1\x4b\x4f\x01\x6c\x0d\xcf\x0a\x74\xbe\x8a\x3a\x6c\xcb\x5d\xfa\x80\x65\xe4\xda\x27\xb7\x88\x9a\x5d\x56\x53\xc8\x5c\x4e\xf5\xbb\xc8\x24\x24\x8f\x88\x0e\x27\xf4\x59\x50\x7d\xbf\x0a\x7f\xfa\xbf\x8b\x69\x84\x80\x23\x1c\x35\xb0\x63\x26\xb6\xe6\x40\x5a\x11\x3a\xd8\x0f\xf1\x86\x03\x06\xc1\xb3\xa9\xdf\x2d\xeb\x62\x94\xcc\xe5\x75\x4d\x35\xdb\x5a\x21\x4e\x91\x58\x92\x5b\xbf\x54\xc0\x2b\x00\x00\xff\xff\x53\xc1\x2f\x77\xf0\x00\x00\x00")

func dataMainJsBytes() ([]byte, error) {
	return bindataRead(
		_dataMainJs,
		"data/main.js",
	)
}

func dataMainJs() (*asset, error) {
	bytes, err := dataMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/main.js", size: 240, mode: os.FileMode(420), modTime: time.Unix(1473536508, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataMainTs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\x8d\xb1\x6e\x83\x30\x10\x86\x77\x3f\xc5\x2f\x16\x60\xe9\x03\x80\xba\x54\xea\xd0\xa5\x5d\xfa\x02\xc6\x39\x11\x47\x60\x3b\xe7\x73\x00\x21\xde\x3d\x36\x91\x32\x59\xfe\xbe\xbb\xef\xec\x1c\x3c\x0b\x92\xd8\x09\x9f\x60\xba\x27\xcb\xd4\xd4\xe5\x5f\xb7\x4a\xd1\x7a\x6a\x33\xe9\x18\xf1\xe5\x05\xbb\x52\x40\x60\xfb\xd0\x42\xd0\x3c\xc6\x0e\xda\x6d\x7d\xa1\xc6\xbb\x28\x9c\x8c\x78\x6e\x4e\xf3\x37\xdc\xc8\x48\xbb\x67\x07\xc8\xd5\xc6\x8f\x82\xf3\x99\xf2\xf4\x99\x1e\x65\x8d\x56\x32\x49\xa8\x31\x43\x97\x4b\xef\x69\xf6\x0b\x1c\x2d\xf8\xdf\x02\x7d\x33\xe7\x66\xf5\xeb\x73\xc4\x8d\xf8\x99\xc3\x44\x33\x39\xa1\x4b\xd5\xbe\x3a\x87\x7a\x06\x00\x00\xff\xff\xed\xd8\xc4\x92\xc9\x00\x00\x00")

func dataMainTsBytes() ([]byte, error) {
	return bindataRead(
		_dataMainTs,
		"data/main.ts",
	)
}

func dataMainTs() (*asset, error) {
	bytes, err := dataMainTsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/main.ts", size: 201, mode: os.FileMode(420), modTime: time.Unix(1473536508, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataPackageJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x90\x31\x4b\x04\x31\x10\x85\xfb\xfd\x15\xc3\x14\x57\xc9\xe2\xb6\x8b\x88\x08\x16\x57\xd8\x1c\x76\x9e\x45\xc8\x8e\xec\x68\x36\x59\x26\x73\xa7\x22\xfb\xdf\xcd\x24\x82\x72\x55\x92\xef\xbd\x79\xbc\xcc\x77\x07\x80\xca\x1a\x08\x47\xc0\x03\x79\x5e\x08\xee\x93\xe2\x95\x09\xd1\x2d\x95\x4b\xe5\x8d\xad\xc2\x67\xa7\x84\x30\x82\xca\x89\x2a\x3b\x93\x64\x4e\xd1\xac\x43\x7f\xdd\x0f\xcd\x39\x51\xf6\xc2\xab\xfe\x2a\x97\xe1\x8b\xe3\xca\xed\xec\xdf\x72\x83\x6d\x22\x17\x6e\xcd\xac\x1b\x65\x35\x17\xf9\x39\xc1\x11\x1f\x44\x92\x8c\x10\x13\x98\x00\x79\x2d\xa1\xaf\x4c\xd3\x11\x61\xb7\x03\xfa\x64\x85\x01\xcb\xe4\x56\xd3\xde\xe9\xeb\x23\xc9\x64\x71\xcf\x2d\xee\xf0\xf7\x93\xf2\xb2\x2e\xe5\xf6\x52\xcd\xee\xa4\x73\x92\x7f\x4d\xf7\xd1\xc3\xcd\x4c\x21\xa4\xbb\xb6\x80\xde\xf1\x6d\xab\x19\xd8\x53\xcc\x75\x37\x8f\xfb\x27\xec\xb6\xee\x27\x00\x00\xff\xff\xea\x6d\x30\xfa\x49\x01\x00\x00")

func dataPackageJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataPackageJson,
		"data/package.json",
	)
}

func dataPackageJson() (*asset, error) {
	bytes, err := dataPackageJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/package.json", size: 329, mode: os.FileMode(420), modTime: time.Unix(1473723807, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataTsconfigJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xe6\x52\x50\x50\x4a\xce\xcf\x2d\xc8\xcc\x49\x2d\xf2\x2f\x28\xc9\xcc\xcf\x2b\x56\xb2\x52\x00\x09\x03\x25\x4a\x12\x8b\xd2\x53\x4b\x80\x7c\x25\xd7\x60\x53\x25\x2e\xa0\x60\xad\x0e\x48\x43\x6a\x45\x72\x4e\x69\x4a\xaa\x92\x82\x95\x42\x34\x44\x65\x5e\x7e\x4a\x6a\x7c\x6e\x7e\x4a\x69\x4e\x6a\xb1\x92\x0e\x44\x2c\xab\x58\x09\xc8\x88\xe5\xaa\xe5\x02\x04\x00\x00\xff\xff\x12\xe5\xbc\xa4\x66\x00\x00\x00")

func dataTsconfigJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataTsconfigJson,
		"data/tsconfig.json",
	)
}

func dataTsconfigJson() (*asset, error) {
	bytes, err := dataTsconfigJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/tsconfig.json", size: 102, mode: os.FileMode(420), modTime: time.Unix(1473536508, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/bot.jade": dataBotJade,
	"data/icon.png": dataIconPng,
	"data/main.js": dataMainJs,
	"data/main.ts": dataMainTs,
	"data/package.json": dataPackageJson,
	"data/tsconfig.json": dataTsconfigJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"bot.jade": &bintree{dataBotJade, map[string]*bintree{}},
		"icon.png": &bintree{dataIconPng, map[string]*bintree{}},
		"main.js": &bintree{dataMainJs, map[string]*bintree{}},
		"main.ts": &bintree{dataMainTs, map[string]*bintree{}},
		"package.json": &bintree{dataPackageJson, map[string]*bintree{}},
		"tsconfig.json": &bintree{dataTsconfigJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

